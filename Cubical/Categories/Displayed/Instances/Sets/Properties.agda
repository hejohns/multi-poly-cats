{-# OPTIONS --safe #-}
module Cubical.Categories.Displayed.Instances.Sets.Properties where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Structure
open import Cubical.Data.Sigma
open import Cubical.Data.Sigma.Properties
open import Cubical.Data.Unit

open import Cubical.Categories.Category
open import Cubical.Categories.Instances.Sets
open import Cubical.Categories.Instances.Sets.More
open import Cubical.Categories.Instances.Sets.Properties
open import Cubical.Categories.Displayed.Base
open import Cubical.Categories.Displayed.Functor
open import Cubical.Categories.Displayed.Fibration.Base
open import Cubical.Categories.Displayed.Instances.Sets.Base
open import Cubical.Categories.Displayed.Presheaf
open import Cubical.Categories.Displayed.Limits.Terminal
open import Cubical.Categories.Displayed.Limits.BinProduct


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level
    ‚ÑìC ‚ÑìC' ‚ÑìD ‚ÑìD' : Level

open UniversalElement·¥∞
open CartesianOver
open Category·¥∞

AllCartesianOversSET·¥∞ : AllCartesianOvers (SET·¥∞ ‚Ñì ‚Ñì')
AllCartesianOversSET·¥∞ {c = A} {A'} B' f .f*c·¥∞' x = B' (f x)
AllCartesianOversSET·¥∞ {c = A} {A'} B' f .œÄ a b'  = b'
AllCartesianOversSET·¥∞ {c = A} {A'} B' f .isCartesian {A''} B'' g gf·¥∞ =
  uniqueExists gf·¥∞ refl
    (Œª gf·¥∞' ‚Üí SET·¥∞ _ _ .isSetHom·¥∞ {A''}{A'}{Œª x ‚Üí f (g x)}{B''}{B'} gf·¥∞' gf·¥∞)
    Œª gf·¥∞' ‚Üí sym

isFibrationSet : isFibration (SET·¥∞ ‚Ñì ‚Ñì')
isFibrationSet d·¥∞ = CartesianOver‚ÜíCartesianLift (SET·¥∞ _ _)
  (AllCartesianOversSET·¥∞ _ _)

VerticalTerminalsSET·¥∞ : VerticalTerminals (SET·¥∞ ‚Ñì ‚Ñì')
VerticalTerminalsSET·¥∞ d·¥∞ .vertex·¥∞ _ = Unit* , isSetUnit*
VerticalTerminalsSET·¥∞ d·¥∞ .element·¥∞ = tt
VerticalTerminalsSET·¥∞ d·¥∞ .universal·¥∞ .equiv-proof _ = uniqueExists
  (Œª _ _ ‚Üí tt*)
  (isPropUnit tt tt)
  (Œª _ p q ‚Üí isSetUnit tt tt p q)
  (Œª _ _ ‚Üí funExt Œª _ ‚Üí funExt Œª _ ‚Üí refl)

LiftedTerminalSET·¥∞ : ‚àÄ{‚Ñì ‚Ñì'} ‚Üí LiftedTerminal (SET·¥∞ ‚Ñì ‚Ñì') terminal'SET
LiftedTerminalSET·¥∞ {‚Ñì} {‚Ñì'} =
  Vertical/ùüô‚ÜíLiftedTerm _ (VerticalTerminalsSET·¥∞ _)

module _ {‚ÑìSET·¥∞ ‚ÑìSET·¥∞' : Level} where
  VerticalBinProdsSET·¥∞ : VerticalBinProducts (SET·¥∞ ‚ÑìSET·¥∞ ‚ÑìSET·¥∞')
  VerticalBinProdsSET·¥∞ {d = X} (X·¥∞ , X·¥∞') .vertex·¥∞ x =
    ‚ü® X·¥∞ x ‚ü© √ó ‚ü® X·¥∞' x ‚ü© , isSet√ó (X·¥∞ x .snd) (X·¥∞' x .snd)
  VerticalBinProdsSET·¥∞ {d = X} (X·¥∞ , X·¥∞') .element·¥∞ = (Œª _ ‚Üí fst) , (Œª _ ‚Üí snd)
  VerticalBinProdsSET·¥∞ {d = X} (X·¥∞ , X·¥∞') .universal·¥∞ {x = Y} {x·¥∞ = Y·¥∞} {f = h}
    .equiv-proof (f , g) =
    uniqueExists (Œª y y·¥∞ ‚Üí f y y·¥∞ , g y y·¥∞) refl
    (Œª _ ‚Üí isSet√ó
      (SET·¥∞ ‚ÑìSET·¥∞ ‚ÑìSET·¥∞' .isSetHom·¥∞ {x = Y} {y = X} {x·¥∞ = Y·¥∞} {y·¥∞ = X·¥∞})
      (SET·¥∞ ‚ÑìSET·¥∞ ‚ÑìSET·¥∞' .isSetHom·¥∞ {x = Y} {y = X} {x·¥∞ = Y·¥∞} {y·¥∞ = X·¥∞'})
      _ _)
    Œª _ p i y y·¥∞ ‚Üí (sym p) i .fst y y·¥∞ , (sym p) i .snd y y·¥∞
